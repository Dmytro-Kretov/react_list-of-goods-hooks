{"version":3,"sources":["App.tsx","Components/GoodsCard/GoodsCard.tsx","Components/GoodsList/GoodsList.tsx","index.tsx"],"names":["SortType","GoodsCard","good","GoodsList","goods","map","goodsFromServer","App","useState","sortField","setSortField","confirmation","setConfirmation","visibleGoods","preparedGoods","sort","good1","good2","Name","localeCompare","Length","length","reverse","getPreparedGoods","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAqBKA,E,0ECfQC,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACxC,oBAAI,UAAQ,OAAZ,SAAoBA,KCATC,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,6BACGA,EAAMC,KAAI,SAAAH,GAAI,OACb,cAAC,EAAD,CAAWA,KAAMA,GAAWA,SFFrBI,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGN,K,YAAAA,E,iBAAAA,M,KA+BE,IAAMO,EAAgB,WAC3B,MAAkCC,mBAAiB,IAAnD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EA7BR,SACET,EADF,GAGG,IADCK,EACF,EADEA,UAAWE,EACb,EADaA,aAEPG,EAAa,YAAOV,GAmB1B,OAjBIK,GACFK,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKT,EAASkB,KACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKjB,EAASoB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXV,GACFG,EAAcQ,UAGTR,EAOHS,CAAiBjB,EAAiB,CAAEG,YAAWE,iBAEnD,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYjB,IAAcT,EAASkB,OAErCS,QAAS,WACPjB,EAAaV,EAASkB,OAN1B,iCAYA,wBACEO,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYjB,IAAcT,EAASoB,SAErCO,QAAS,WACPjB,EAAaV,EAASoB,SAN1B,4BAYA,wBACEK,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAaf,IAEfgB,QAAS,WACPf,GAAiBD,IANrB,sBAYEF,GAAaE,IAEX,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,EAAa,IACbE,GAAgB,IALpB,sBAYN,cAAC,EAAD,CAAWR,MAAOS,QG5GxBe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b5230ef6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { FilterParams } from './Types/FilterParams';\nimport { GoodsList } from './Components/GoodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Name = 'name',\n  Length = 'length',\n}\n\nfunction getPreparedGoods(\n  goods:string[],\n  { sortField, confirmation }: FilterParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Name:\n          return good1.localeCompare(good2);\n        case SortType.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (confirmation) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<string>('');\n  const [confirmation, setConfirmation] = useState(false);\n  const visibleGoods\n    = getPreparedGoods(goodsFromServer, { sortField, confirmation });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-ligth': sortField !== SortType.Name,\n          })}\n          onClick={() => {\n            setSortField(SortType.Name);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-ligth': sortField !== SortType.Length,\n          })}\n          onClick={() => {\n            setSortField(SortType.Length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-ligth': !confirmation,\n          })}\n          onClick={() => {\n            setConfirmation(!confirmation);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField || confirmation)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                setSortField('');\n                setConfirmation(false);\n              }}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n      <GoodsList goods={visibleGoods} />\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  good: string,\n};\n\nexport const GoodsCard: React.FC<Props> = ({ good }) => (\n  <li data-cy=\"Good\">{good}</li>\n);\n","import React from 'react';\nimport { GoodsCard } from '../GoodsCard';\n\ntype Props = {\n  goods: string[],\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <GoodsCard good={good} key={good} />\n    ))}\n  </ul>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}